package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"fmt"

	"github.com/weeb-vip/anime-api/graph/generated"
	"github.com/weeb-vip/anime-api/graph/model"
	"github.com/weeb-vip/anime-api/internal/resolvers"
)

// DbSearch is the resolver for the dbSearch field.
func (r *queryResolver) DbSearch(ctx context.Context, searchQuery model.AnimeSearchInput) ([]*model.Anime, error) {
	return resolvers.DBSearchAnime(ctx, r.AnimeService, searchQuery.Query, searchQuery.Page, searchQuery.PerPage)
}

// APIInfo is the resolver for the apiInfo field.
func (r *queryResolver) APIInfo(ctx context.Context) (*model.APIInfo, error) {
	return resolvers.APIInfo(r.Config)
}

// Anime is the resolver for the anime field.
func (r *queryResolver) Anime(ctx context.Context, id string) (*model.Anime, error) {
	return resolvers.AnimeByID(ctx, r.AnimeService, id)
}

// NewestAnime is the resolver for the newestAnime field.
func (r *queryResolver) NewestAnime(ctx context.Context, limit *int) ([]*model.Anime, error) {
	return resolvers.NewestAnime(ctx, r.AnimeService, limit)
}

// TopRatedAnime is the resolver for the topRatedAnime field.
func (r *queryResolver) TopRatedAnime(ctx context.Context, limit *int) ([]*model.Anime, error) {
	return resolvers.TopRatedAnime(ctx, r.AnimeService, limit)
}

// MostPopularAnime is the resolver for the mostPopularAnime field.
func (r *queryResolver) MostPopularAnime(ctx context.Context, limit *int) ([]*model.Anime, error) {
	return resolvers.MostPopularAnime(ctx, r.AnimeService, limit)
}

// Episode is the resolver for the episode field.
func (r *queryResolver) Episode(ctx context.Context, id string) (*model.Episode, error) {
	panic(fmt.Errorf("not implemented: Episode - episode"))
}

// EpisodesByAnimeID is the resolver for the episodesByAnimeId field.
func (r *queryResolver) EpisodesByAnimeID(ctx context.Context, animeID string) ([]*model.Episode, error) {
	return resolvers.EpisodesByAnimeID(ctx, r.AnimeEpisodeService, animeID)
}

// CurrentlyAiring is the resolver for the currentlyAiring field.
func (r *queryResolver) CurrentlyAiring(ctx context.Context, input *model.CurrentlyAiringInput, limit *int) ([]*model.Anime, error) {
	return resolvers.CurrentlyAiring(ctx, r.AnimeService, input, limit, r.CacheService)
}

// AnimeBySeasons is the resolver for the animeBySeasons field.
func (r *queryResolver) AnimeBySeasons(ctx context.Context, season string, limit *int) ([]*model.Anime, error) {
	return resolvers.AnimeBySeasons(ctx, r.AnimeSeasonService, r.AnimeService, season, limit)
}

// AnimeBySeasonAndYear is the resolver for the animeBySeasonAndYear field.
func (r *queryResolver) AnimeBySeasonAndYear(ctx context.Context, seasonName string, year int, limit *int) ([]*model.Anime, error) {
	return resolvers.AnimeBySeasonAndYear(ctx, r.AnimeSeasonService, r.AnimeService, seasonName, year, limit)
}

// CharactersAndStaffByAnimeID is the resolver for the charactersAndStaffByAnimeId field.
func (r *queryResolver) CharactersAndStaffByAnimeID(ctx context.Context, animeID string) ([]*model.CharacterWithStaff, error) {
	return resolvers.CharactersAndStaffByAnimeID(ctx, r.AnimeCharacterWithStaffLinkService, animeID)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
