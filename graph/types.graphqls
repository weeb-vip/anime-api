# Season is now a string scalar that can accept any season format
# Examples: "SPRING_2024", "SUMMER_2025", "FALL_2026", etc.
scalar Season

enum AnimeSeasonStatus {
    UNKNOWN
    CONFIRMED
    ANNOUNCED
    CANCELLED
}

type AnimeApi {
    "Version of event anime-api service"
    version: String!
}

type ApiInfo {
    "API Info of the AnimeAPI"
    animeApi: AnimeApi! @goField(forceResolver: true)
    "Name of the API"
    name: String!
}

"Anime Type"
type Anime @key(fields: "id") {
    "ID of the anime"
    id: ID!
    "AniDB ID of the anime"
    anidbid: String
    "TheTVDB ID of the anime"
    thetvdbid: String
    "English titel the anime"
    titleEn: String
    "Japanese titel the anime"
    titleJp: String
    "Romaji titel the anime"
    titleRomaji: String
    "Kanji titel the anime"
    titleKanji: String
    "Synonyms of the anime"
    titleSynonyms: [String!]
    "Description of the anime"
    description: String
    "Image URL of the anime"
    imageUrl: String
    "Tags of the anime"
    tags: [String!]
    "Studios of the anime"
    studios: [String!]
    "Anime status (finished, airing, upcoming)"
    animeStatus: String
    "Anime episode count"
    episodeCount: Int
    "returns all episodes of the anime"
    episodes: [Episode!] @goField(forceResolver: true)
    "Anime episode duration"
    duration: String
    "Anime rating"
    rating: String
    "Anime first air date"
    startDate: Time
    "Anime last air date"
    endDate: Time
    "Anime broadcast"
    broadcast: String
    "Anime source (myanimelist, anime-planet, anidb, anilist, kitsu, anime_news_network)"
    source: String
    "Anime licensors"
    licensors: [String!]
    "Anime rank"
    ranking: Int
    "Anime seasons"
    seasons: [AnimeSeason!] @goField(forceResolver: true)
    createdAt: String!
    updatedAt: String!
    nextEpisode: Episode @goField(forceResolver: true )
}

type AnimeSeason {
    "ID of the anime season"
    id: ID!
    "Season identifier (e.g., SPRING_2024)"
    season: Season!
    "Status of the anime season"
    status: AnimeSeasonStatus!
    "Episode count for this season"
    episodeCount: Int
    "Additional notes about this season"
    notes: String
    "Anime ID this season belongs to"
    animeId: String
    createdAt: Time!
    updatedAt: Time!
}

type Episode @key(fields: "animeId") {
    "ID of the episode"
    id: ID!
    "Anime ID of the episode"
    animeId: String
    "Episode number"
    episodeNumber: Int
    "Episode title"
    titleEn: String
    "Episode title"
    titleJp: String
    "Episode synopsis"
    synopsis: String
    "Episode air date"
    airDate: Time

    createdAt: String!
    updatedAt: String!
}

input AnimeSearchInput {
    "Search query"
    query: String!
    "Page number"
    page: Int!
    "Items per page"
    perPage: Int!
    "Sort by"
    sortBy: String
    "Sort direction"
    sortDirection: String
    "Tags"
    tags: [String!]
    "Studios"
    studios: [String!]
    "Anime statuses"
    animeStatuses: [String!]
}

input CurrentlyAiringInput {
    "start date"
    startDate: Time!
    "end date"
    endDate: Time
    "days in the future"
    daysInFuture: Int
}

extend type UserAnime @key(fields: "animeID") {
    animeID: String! @external
    anime: Anime @goField(forceResolver: true)
}

type AnimeCharacter {
    "Unique identifier for the character"
    id: ID!

    "The ID of the anime this character belongs to"
    animeId: String!

    "Name of the character"
    name: String!

    "The role of the character (e.g., main, supporting)"
    role: String!

    "The character's birthdate (if known)"
    birthday: String

    "The character's zodiac sign (if known)"
    zodiac: String

    "The character's gender (e.g., male, female, non-binary)"
    gender: String

    "The character's race (e.g., human, elf, demon)"
    race: String

    "The character's height"
    height: String

    "The character's weight"
    weight: String

    "The character's title (e.g., 'The Hero', 'The King')"
    title: String

    "The character's marital status (e.g., single, married, unknown)"
    martialStatus: String

    "A brief summary of the character's background or story"
    summary: String

    "URL or path to the character's image"
    image: String

    "Timestamp when the character was created in the database"
    createdAt: Time

    "Timestamp when the character was last updated in the database"
    updatedAt: Time

    "The voice actor for the character"
    staff: [AnimeStaff!]
}

type AnimeStaff {
    "Unique identifier for the staff member"
    id: ID!

    "The given name of the staff member"
    givenName: String!

    "Staff Language"
    language: String

    "The family name of the staff member"
    familyName: String!

    "URL or path to the staff member's image"
    image: String

    "The staff member's birthdate (if known)"
    birthday: String

    "The staff member's birthplace (if known)"
    birthPlace: String

    "The staff member's blood type (if known)"
    bloodType: String

    "The staff member's hobbies (if known)"
    hobbies: String

    "A brief summary of the staff member's background or career"
    summary: String

    "Timestamp when the staff member was created in the database"
    createdAt: Time

    "Timestamp when the staff member was last updated in the database"
    updatedAt: Time

    "the characters associated with the staff member"
    characters: [AnimeCharacter!]
}



type CharacterWithStaff {
    "The character details"
    character: AnimeCharacter!

    "The staff member associated with the character"
    staff: [AnimeStaff!]
}