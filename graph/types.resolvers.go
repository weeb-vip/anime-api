package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/weeb-vip/anime-api/graph/generated"
	"github.com/weeb-vip/anime-api/graph/model"
	"github.com/weeb-vip/anime-api/internal/resolvers"
)

// Episodes is the resolver for the episodes field.
func (r *animeResolver) Episodes(ctx context.Context, obj *model.Anime) ([]*model.Episode, error) {
	animeID := obj.ID
	return resolvers.EpisodesByAnimeID(ctx, r.AnimeEpisodeService, animeID)
}

// NextEpisode is the resolver for the nextEpisode field.
func (r *animeResolver) NextEpisode(ctx context.Context, obj *model.Anime) (*model.Episode, error) {
	if obj.NextEpisode != nil {
		return obj.NextEpisode, nil
	}
	animeID := obj.ID
	return resolvers.NextEpisode(ctx, r.AnimeEpisodeService, animeID)
}

// AnimeAPI is the resolver for the animeApi field.
func (r *apiInfoResolver) AnimeAPI(ctx context.Context, obj *model.APIInfo) (*model.AnimeAPI, error) {
	return resolvers.AnimeAPI(r.Config)
}

// Anime is the resolver for the anime field.
func (r *userAnimeResolver) Anime(ctx context.Context, obj *model.UserAnime) (*model.Anime, error) {
	animeID := obj.AnimeID
	return resolvers.AnimeByID(ctx, r.AnimeService, animeID)
}

// Anime returns generated.AnimeResolver implementation.
func (r *Resolver) Anime() generated.AnimeResolver { return &animeResolver{r} }

// ApiInfo returns generated.ApiInfoResolver implementation.
func (r *Resolver) ApiInfo() generated.ApiInfoResolver { return &apiInfoResolver{r} }

// UserAnime returns generated.UserAnimeResolver implementation.
func (r *Resolver) UserAnime() generated.UserAnimeResolver { return &userAnimeResolver{r} }

type animeResolver struct{ *Resolver }
type apiInfoResolver struct{ *Resolver }
type userAnimeResolver struct{ *Resolver }
